// generated by "charlatan -output=test/charlatan/subcribrClient.go -package=charlatan api.Chat_SubscribeClient".  DO NOT EDIT.

package charlatan

import (
	"context"
	"reflect"

	"github.com/mbobakov/chat/api"
	"google.golang.org/grpc/metadata"
)

// Chat_SubscribeClientCloseSendInvocation represents a single call of FakeChat_SubscribeClient.CloseSend
type Chat_SubscribeClientCloseSendInvocation struct {
	Results struct {
		Ident52 error
	}
}

// Chat_SubscribeClientContextInvocation represents a single call of FakeChat_SubscribeClient.Context
type Chat_SubscribeClientContextInvocation struct {
	Results struct {
		Ident53 context.Context
	}
}

// Chat_SubscribeClientHeaderInvocation represents a single call of FakeChat_SubscribeClient.Header
type Chat_SubscribeClientHeaderInvocation struct {
	Results struct {
		Ident54 metadata.MD
		Ident55 error
	}
}

// Chat_SubscribeClientRecvInvocation represents a single call of FakeChat_SubscribeClient.Recv
type Chat_SubscribeClientRecvInvocation struct {
	Results struct {
		Ident56 *api.Message
		Ident57 error
	}
}

// Chat_SubscribeClientRecvMsgInvocation represents a single call of FakeChat_SubscribeClient.RecvMsg
type Chat_SubscribeClientRecvMsgInvocation struct {
	Parameters struct {
		M interface{}
	}
	Results struct {
		Ident58 error
	}
}

// NewChat_SubscribeClientRecvMsgInvocation creates a new instance of Chat_SubscribeClientRecvMsgInvocation
func NewChat_SubscribeClientRecvMsgInvocation(m interface{}, ident58 error) *Chat_SubscribeClientRecvMsgInvocation {
	invocation := new(Chat_SubscribeClientRecvMsgInvocation)

	invocation.Parameters.M = m

	invocation.Results.Ident58 = ident58

	return invocation
}

// Chat_SubscribeClientSendInvocation represents a single call of FakeChat_SubscribeClient.Send
type Chat_SubscribeClientSendInvocation struct {
	Parameters struct {
		Ident59 *api.Message
	}
	Results struct {
		Ident60 error
	}
}

// NewChat_SubscribeClientSendInvocation creates a new instance of Chat_SubscribeClientSendInvocation
func NewChat_SubscribeClientSendInvocation(ident59 *api.Message, ident60 error) *Chat_SubscribeClientSendInvocation {
	invocation := new(Chat_SubscribeClientSendInvocation)

	invocation.Parameters.Ident59 = ident59

	invocation.Results.Ident60 = ident60

	return invocation
}

// Chat_SubscribeClientSendMsgInvocation represents a single call of FakeChat_SubscribeClient.SendMsg
type Chat_SubscribeClientSendMsgInvocation struct {
	Parameters struct {
		M interface{}
	}
	Results struct {
		Ident61 error
	}
}

// NewChat_SubscribeClientSendMsgInvocation creates a new instance of Chat_SubscribeClientSendMsgInvocation
func NewChat_SubscribeClientSendMsgInvocation(m interface{}, ident61 error) *Chat_SubscribeClientSendMsgInvocation {
	invocation := new(Chat_SubscribeClientSendMsgInvocation)

	invocation.Parameters.M = m

	invocation.Results.Ident61 = ident61

	return invocation
}

// Chat_SubscribeClientTrailerInvocation represents a single call of FakeChat_SubscribeClient.Trailer
type Chat_SubscribeClientTrailerInvocation struct {
	Results struct {
		Ident62 metadata.MD
	}
}

// Chat_SubscribeClientTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type Chat_SubscribeClientTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeChat_SubscribeClient is a mock implementation of Chat_SubscribeClient for testing.
Use it in your tests as in this example:

	package example

	func TestWithChat_SubscribeClient(t *testing.T) {
		f := &charlatan.FakeChat_SubscribeClient{
			CloseSendHook: func() (ident52 error) {
				// ensure parameters meet expectations, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeCloseSend ...
		f.AssertCloseSendCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeCloseSend.
*/
type FakeChat_SubscribeClient struct {
	CloseSendHook func() error
	ContextHook   func() context.Context
	HeaderHook    func() (metadata.MD, error)
	RecvHook      func() (*api.Message, error)
	RecvMsgHook   func(interface{}) error
	SendHook      func(*api.Message) error
	SendMsgHook   func(interface{}) error
	TrailerHook   func() metadata.MD

	CloseSendCalls []*Chat_SubscribeClientCloseSendInvocation
	ContextCalls   []*Chat_SubscribeClientContextInvocation
	HeaderCalls    []*Chat_SubscribeClientHeaderInvocation
	RecvCalls      []*Chat_SubscribeClientRecvInvocation
	RecvMsgCalls   []*Chat_SubscribeClientRecvMsgInvocation
	SendCalls      []*Chat_SubscribeClientSendInvocation
	SendMsgCalls   []*Chat_SubscribeClientSendMsgInvocation
	TrailerCalls   []*Chat_SubscribeClientTrailerInvocation
}

// NewFakeChat_SubscribeClientDefaultPanic returns an instance of FakeChat_SubscribeClient with all hooks configured to panic
func NewFakeChat_SubscribeClientDefaultPanic() *FakeChat_SubscribeClient {
	return &FakeChat_SubscribeClient{
		CloseSendHook: func() (ident52 error) {
			panic("Unexpected call to Chat_SubscribeClient.CloseSend")
		},
		ContextHook: func() (ident53 context.Context) {
			panic("Unexpected call to Chat_SubscribeClient.Context")
		},
		HeaderHook: func() (ident54 metadata.MD, ident55 error) {
			panic("Unexpected call to Chat_SubscribeClient.Header")
		},
		RecvHook: func() (ident56 *api.Message, ident57 error) {
			panic("Unexpected call to Chat_SubscribeClient.Recv")
		},
		RecvMsgHook: func(interface{}) (ident58 error) {
			panic("Unexpected call to Chat_SubscribeClient.RecvMsg")
		},
		SendHook: func(*api.Message) (ident60 error) {
			panic("Unexpected call to Chat_SubscribeClient.Send")
		},
		SendMsgHook: func(interface{}) (ident61 error) {
			panic("Unexpected call to Chat_SubscribeClient.SendMsg")
		},
		TrailerHook: func() (ident62 metadata.MD) {
			panic("Unexpected call to Chat_SubscribeClient.Trailer")
		},
	}
}

// NewFakeChat_SubscribeClientDefaultFatal returns an instance of FakeChat_SubscribeClient with all hooks configured to call t.Fatal
func NewFakeChat_SubscribeClientDefaultFatal(t_sym1 Chat_SubscribeClientTestingT) *FakeChat_SubscribeClient {
	return &FakeChat_SubscribeClient{
		CloseSendHook: func() (ident52 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeClient.CloseSend")
			return
		},
		ContextHook: func() (ident53 context.Context) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeClient.Context")
			return
		},
		HeaderHook: func() (ident54 metadata.MD, ident55 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeClient.Header")
			return
		},
		RecvHook: func() (ident56 *api.Message, ident57 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeClient.Recv")
			return
		},
		RecvMsgHook: func(interface{}) (ident58 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeClient.RecvMsg")
			return
		},
		SendHook: func(*api.Message) (ident60 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeClient.Send")
			return
		},
		SendMsgHook: func(interface{}) (ident61 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeClient.SendMsg")
			return
		},
		TrailerHook: func() (ident62 metadata.MD) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeClient.Trailer")
			return
		},
	}
}

// NewFakeChat_SubscribeClientDefaultError returns an instance of FakeChat_SubscribeClient with all hooks configured to call t.Error
func NewFakeChat_SubscribeClientDefaultError(t_sym2 Chat_SubscribeClientTestingT) *FakeChat_SubscribeClient {
	return &FakeChat_SubscribeClient{
		CloseSendHook: func() (ident52 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeClient.CloseSend")
			return
		},
		ContextHook: func() (ident53 context.Context) {
			t_sym2.Error("Unexpected call to Chat_SubscribeClient.Context")
			return
		},
		HeaderHook: func() (ident54 metadata.MD, ident55 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeClient.Header")
			return
		},
		RecvHook: func() (ident56 *api.Message, ident57 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeClient.Recv")
			return
		},
		RecvMsgHook: func(interface{}) (ident58 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeClient.RecvMsg")
			return
		},
		SendHook: func(*api.Message) (ident60 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeClient.Send")
			return
		},
		SendMsgHook: func(interface{}) (ident61 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeClient.SendMsg")
			return
		},
		TrailerHook: func() (ident62 metadata.MD) {
			t_sym2.Error("Unexpected call to Chat_SubscribeClient.Trailer")
			return
		},
	}
}

func (f *FakeChat_SubscribeClient) Reset() {
	f.CloseSendCalls = []*Chat_SubscribeClientCloseSendInvocation{}
	f.ContextCalls = []*Chat_SubscribeClientContextInvocation{}
	f.HeaderCalls = []*Chat_SubscribeClientHeaderInvocation{}
	f.RecvCalls = []*Chat_SubscribeClientRecvInvocation{}
	f.RecvMsgCalls = []*Chat_SubscribeClientRecvMsgInvocation{}
	f.SendCalls = []*Chat_SubscribeClientSendInvocation{}
	f.SendMsgCalls = []*Chat_SubscribeClientSendMsgInvocation{}
	f.TrailerCalls = []*Chat_SubscribeClientTrailerInvocation{}
}

func (f_sym3 *FakeChat_SubscribeClient) CloseSend() (ident52 error) {
	if f_sym3.CloseSendHook == nil {
		panic("Chat_SubscribeClient.CloseSend() called but FakeChat_SubscribeClient.CloseSendHook is nil")
	}

	invocation_sym3 := new(Chat_SubscribeClientCloseSendInvocation)
	f_sym3.CloseSendCalls = append(f_sym3.CloseSendCalls, invocation_sym3)

	ident52 = f_sym3.CloseSendHook()

	invocation_sym3.Results.Ident52 = ident52

	return
}

// SetCloseSendStub configures Chat_SubscribeClient.CloseSend to always return the given values
func (f_sym4 *FakeChat_SubscribeClient) SetCloseSendStub(ident52 error) {
	f_sym4.CloseSendHook = func() error {
		return ident52
	}
}

// CloseSendCalled returns true if FakeChat_SubscribeClient.CloseSend was called
func (f *FakeChat_SubscribeClient) CloseSendCalled() bool {
	return len(f.CloseSendCalls) != 0
}

// AssertCloseSendCalled calls t.Error if FakeChat_SubscribeClient.CloseSend was not called
func (f *FakeChat_SubscribeClient) AssertCloseSendCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.CloseSendCalls) == 0 {
		t.Error("FakeChat_SubscribeClient.CloseSend not called, expected at least one")
	}
}

// CloseSendNotCalled returns true if FakeChat_SubscribeClient.CloseSend was not called
func (f *FakeChat_SubscribeClient) CloseSendNotCalled() bool {
	return len(f.CloseSendCalls) == 0
}

// AssertCloseSendNotCalled calls t.Error if FakeChat_SubscribeClient.CloseSend was called
func (f *FakeChat_SubscribeClient) AssertCloseSendNotCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.CloseSendCalls) != 0 {
		t.Error("FakeChat_SubscribeClient.CloseSend called, expected none")
	}
}

// CloseSendCalledOnce returns true if FakeChat_SubscribeClient.CloseSend was called exactly once
func (f *FakeChat_SubscribeClient) CloseSendCalledOnce() bool {
	return len(f.CloseSendCalls) == 1
}

// AssertCloseSendCalledOnce calls t.Error if FakeChat_SubscribeClient.CloseSend was not called exactly once
func (f *FakeChat_SubscribeClient) AssertCloseSendCalledOnce(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.CloseSendCalls) != 1 {
		t.Errorf("FakeChat_SubscribeClient.CloseSend called %d times, expected 1", len(f.CloseSendCalls))
	}
}

// CloseSendCalledN returns true if FakeChat_SubscribeClient.CloseSend was called at least n times
func (f *FakeChat_SubscribeClient) CloseSendCalledN(n int) bool {
	return len(f.CloseSendCalls) >= n
}

// AssertCloseSendCalledN calls t.Error if FakeChat_SubscribeClient.CloseSend was called less than n times
func (f *FakeChat_SubscribeClient) AssertCloseSendCalledN(t Chat_SubscribeClientTestingT, n int) {
	t.Helper()
	if len(f.CloseSendCalls) < n {
		t.Errorf("FakeChat_SubscribeClient.CloseSend called %d times, expected >= %d", len(f.CloseSendCalls), n)
	}
}

func (f_sym5 *FakeChat_SubscribeClient) Context() (ident53 context.Context) {
	if f_sym5.ContextHook == nil {
		panic("Chat_SubscribeClient.Context() called but FakeChat_SubscribeClient.ContextHook is nil")
	}

	invocation_sym5 := new(Chat_SubscribeClientContextInvocation)
	f_sym5.ContextCalls = append(f_sym5.ContextCalls, invocation_sym5)

	ident53 = f_sym5.ContextHook()

	invocation_sym5.Results.Ident53 = ident53

	return
}

// SetContextStub configures Chat_SubscribeClient.Context to always return the given values
func (f_sym6 *FakeChat_SubscribeClient) SetContextStub(ident53 context.Context) {
	f_sym6.ContextHook = func() context.Context {
		return ident53
	}
}

// ContextCalled returns true if FakeChat_SubscribeClient.Context was called
func (f *FakeChat_SubscribeClient) ContextCalled() bool {
	return len(f.ContextCalls) != 0
}

// AssertContextCalled calls t.Error if FakeChat_SubscribeClient.Context was not called
func (f *FakeChat_SubscribeClient) AssertContextCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.ContextCalls) == 0 {
		t.Error("FakeChat_SubscribeClient.Context not called, expected at least one")
	}
}

// ContextNotCalled returns true if FakeChat_SubscribeClient.Context was not called
func (f *FakeChat_SubscribeClient) ContextNotCalled() bool {
	return len(f.ContextCalls) == 0
}

// AssertContextNotCalled calls t.Error if FakeChat_SubscribeClient.Context was called
func (f *FakeChat_SubscribeClient) AssertContextNotCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.ContextCalls) != 0 {
		t.Error("FakeChat_SubscribeClient.Context called, expected none")
	}
}

// ContextCalledOnce returns true if FakeChat_SubscribeClient.Context was called exactly once
func (f *FakeChat_SubscribeClient) ContextCalledOnce() bool {
	return len(f.ContextCalls) == 1
}

// AssertContextCalledOnce calls t.Error if FakeChat_SubscribeClient.Context was not called exactly once
func (f *FakeChat_SubscribeClient) AssertContextCalledOnce(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.ContextCalls) != 1 {
		t.Errorf("FakeChat_SubscribeClient.Context called %d times, expected 1", len(f.ContextCalls))
	}
}

// ContextCalledN returns true if FakeChat_SubscribeClient.Context was called at least n times
func (f *FakeChat_SubscribeClient) ContextCalledN(n int) bool {
	return len(f.ContextCalls) >= n
}

// AssertContextCalledN calls t.Error if FakeChat_SubscribeClient.Context was called less than n times
func (f *FakeChat_SubscribeClient) AssertContextCalledN(t Chat_SubscribeClientTestingT, n int) {
	t.Helper()
	if len(f.ContextCalls) < n {
		t.Errorf("FakeChat_SubscribeClient.Context called %d times, expected >= %d", len(f.ContextCalls), n)
	}
}

func (f_sym7 *FakeChat_SubscribeClient) Header() (ident54 metadata.MD, ident55 error) {
	if f_sym7.HeaderHook == nil {
		panic("Chat_SubscribeClient.Header() called but FakeChat_SubscribeClient.HeaderHook is nil")
	}

	invocation_sym7 := new(Chat_SubscribeClientHeaderInvocation)
	f_sym7.HeaderCalls = append(f_sym7.HeaderCalls, invocation_sym7)

	ident54, ident55 = f_sym7.HeaderHook()

	invocation_sym7.Results.Ident54 = ident54
	invocation_sym7.Results.Ident55 = ident55

	return
}

// SetHeaderStub configures Chat_SubscribeClient.Header to always return the given values
func (f_sym8 *FakeChat_SubscribeClient) SetHeaderStub(ident54 metadata.MD, ident55 error) {
	f_sym8.HeaderHook = func() (metadata.MD, error) {
		return ident54, ident55
	}
}

// HeaderCalled returns true if FakeChat_SubscribeClient.Header was called
func (f *FakeChat_SubscribeClient) HeaderCalled() bool {
	return len(f.HeaderCalls) != 0
}

// AssertHeaderCalled calls t.Error if FakeChat_SubscribeClient.Header was not called
func (f *FakeChat_SubscribeClient) AssertHeaderCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.HeaderCalls) == 0 {
		t.Error("FakeChat_SubscribeClient.Header not called, expected at least one")
	}
}

// HeaderNotCalled returns true if FakeChat_SubscribeClient.Header was not called
func (f *FakeChat_SubscribeClient) HeaderNotCalled() bool {
	return len(f.HeaderCalls) == 0
}

// AssertHeaderNotCalled calls t.Error if FakeChat_SubscribeClient.Header was called
func (f *FakeChat_SubscribeClient) AssertHeaderNotCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.HeaderCalls) != 0 {
		t.Error("FakeChat_SubscribeClient.Header called, expected none")
	}
}

// HeaderCalledOnce returns true if FakeChat_SubscribeClient.Header was called exactly once
func (f *FakeChat_SubscribeClient) HeaderCalledOnce() bool {
	return len(f.HeaderCalls) == 1
}

// AssertHeaderCalledOnce calls t.Error if FakeChat_SubscribeClient.Header was not called exactly once
func (f *FakeChat_SubscribeClient) AssertHeaderCalledOnce(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.HeaderCalls) != 1 {
		t.Errorf("FakeChat_SubscribeClient.Header called %d times, expected 1", len(f.HeaderCalls))
	}
}

// HeaderCalledN returns true if FakeChat_SubscribeClient.Header was called at least n times
func (f *FakeChat_SubscribeClient) HeaderCalledN(n int) bool {
	return len(f.HeaderCalls) >= n
}

// AssertHeaderCalledN calls t.Error if FakeChat_SubscribeClient.Header was called less than n times
func (f *FakeChat_SubscribeClient) AssertHeaderCalledN(t Chat_SubscribeClientTestingT, n int) {
	t.Helper()
	if len(f.HeaderCalls) < n {
		t.Errorf("FakeChat_SubscribeClient.Header called %d times, expected >= %d", len(f.HeaderCalls), n)
	}
}

func (f_sym9 *FakeChat_SubscribeClient) Recv() (ident56 *api.Message, ident57 error) {
	if f_sym9.RecvHook == nil {
		panic("Chat_SubscribeClient.Recv() called but FakeChat_SubscribeClient.RecvHook is nil")
	}

	invocation_sym9 := new(Chat_SubscribeClientRecvInvocation)
	f_sym9.RecvCalls = append(f_sym9.RecvCalls, invocation_sym9)

	ident56, ident57 = f_sym9.RecvHook()

	invocation_sym9.Results.Ident56 = ident56
	invocation_sym9.Results.Ident57 = ident57

	return
}

// SetRecvStub configures Chat_SubscribeClient.Recv to always return the given values
func (f_sym10 *FakeChat_SubscribeClient) SetRecvStub(ident56 *api.Message, ident57 error) {
	f_sym10.RecvHook = func() (*api.Message, error) {
		return ident56, ident57
	}
}

// RecvCalled returns true if FakeChat_SubscribeClient.Recv was called
func (f *FakeChat_SubscribeClient) RecvCalled() bool {
	return len(f.RecvCalls) != 0
}

// AssertRecvCalled calls t.Error if FakeChat_SubscribeClient.Recv was not called
func (f *FakeChat_SubscribeClient) AssertRecvCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.RecvCalls) == 0 {
		t.Error("FakeChat_SubscribeClient.Recv not called, expected at least one")
	}
}

// RecvNotCalled returns true if FakeChat_SubscribeClient.Recv was not called
func (f *FakeChat_SubscribeClient) RecvNotCalled() bool {
	return len(f.RecvCalls) == 0
}

// AssertRecvNotCalled calls t.Error if FakeChat_SubscribeClient.Recv was called
func (f *FakeChat_SubscribeClient) AssertRecvNotCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.RecvCalls) != 0 {
		t.Error("FakeChat_SubscribeClient.Recv called, expected none")
	}
}

// RecvCalledOnce returns true if FakeChat_SubscribeClient.Recv was called exactly once
func (f *FakeChat_SubscribeClient) RecvCalledOnce() bool {
	return len(f.RecvCalls) == 1
}

// AssertRecvCalledOnce calls t.Error if FakeChat_SubscribeClient.Recv was not called exactly once
func (f *FakeChat_SubscribeClient) AssertRecvCalledOnce(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.RecvCalls) != 1 {
		t.Errorf("FakeChat_SubscribeClient.Recv called %d times, expected 1", len(f.RecvCalls))
	}
}

// RecvCalledN returns true if FakeChat_SubscribeClient.Recv was called at least n times
func (f *FakeChat_SubscribeClient) RecvCalledN(n int) bool {
	return len(f.RecvCalls) >= n
}

// AssertRecvCalledN calls t.Error if FakeChat_SubscribeClient.Recv was called less than n times
func (f *FakeChat_SubscribeClient) AssertRecvCalledN(t Chat_SubscribeClientTestingT, n int) {
	t.Helper()
	if len(f.RecvCalls) < n {
		t.Errorf("FakeChat_SubscribeClient.Recv called %d times, expected >= %d", len(f.RecvCalls), n)
	}
}

func (f_sym11 *FakeChat_SubscribeClient) RecvMsg(m interface{}) (ident58 error) {
	if f_sym11.RecvMsgHook == nil {
		panic("Chat_SubscribeClient.RecvMsg() called but FakeChat_SubscribeClient.RecvMsgHook is nil")
	}

	invocation_sym11 := new(Chat_SubscribeClientRecvMsgInvocation)
	f_sym11.RecvMsgCalls = append(f_sym11.RecvMsgCalls, invocation_sym11)

	invocation_sym11.Parameters.M = m

	ident58 = f_sym11.RecvMsgHook(m)

	invocation_sym11.Results.Ident58 = ident58

	return
}

// SetRecvMsgStub configures Chat_SubscribeClient.RecvMsg to always return the given values
func (f_sym12 *FakeChat_SubscribeClient) SetRecvMsgStub(ident58 error) {
	f_sym12.RecvMsgHook = func(interface{}) error {
		return ident58
	}
}

// SetRecvMsgInvocation configures Chat_SubscribeClient.RecvMsg to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym13 *FakeChat_SubscribeClient) SetRecvMsgInvocation(calls_sym13 []*Chat_SubscribeClientRecvMsgInvocation, fallback_sym13 func() error) {
	f_sym13.RecvMsgHook = func(m interface{}) (ident58 error) {
		for _, call_sym13 := range calls_sym13 {
			if reflect.DeepEqual(call_sym13.Parameters.M, m) {
				ident58 = call_sym13.Results.Ident58

				return
			}
		}

		return fallback_sym13()
	}
}

// RecvMsgCalled returns true if FakeChat_SubscribeClient.RecvMsg was called
func (f *FakeChat_SubscribeClient) RecvMsgCalled() bool {
	return len(f.RecvMsgCalls) != 0
}

// AssertRecvMsgCalled calls t.Error if FakeChat_SubscribeClient.RecvMsg was not called
func (f *FakeChat_SubscribeClient) AssertRecvMsgCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.RecvMsgCalls) == 0 {
		t.Error("FakeChat_SubscribeClient.RecvMsg not called, expected at least one")
	}
}

// RecvMsgNotCalled returns true if FakeChat_SubscribeClient.RecvMsg was not called
func (f *FakeChat_SubscribeClient) RecvMsgNotCalled() bool {
	return len(f.RecvMsgCalls) == 0
}

// AssertRecvMsgNotCalled calls t.Error if FakeChat_SubscribeClient.RecvMsg was called
func (f *FakeChat_SubscribeClient) AssertRecvMsgNotCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.RecvMsgCalls) != 0 {
		t.Error("FakeChat_SubscribeClient.RecvMsg called, expected none")
	}
}

// RecvMsgCalledOnce returns true if FakeChat_SubscribeClient.RecvMsg was called exactly once
func (f *FakeChat_SubscribeClient) RecvMsgCalledOnce() bool {
	return len(f.RecvMsgCalls) == 1
}

// AssertRecvMsgCalledOnce calls t.Error if FakeChat_SubscribeClient.RecvMsg was not called exactly once
func (f *FakeChat_SubscribeClient) AssertRecvMsgCalledOnce(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.RecvMsgCalls) != 1 {
		t.Errorf("FakeChat_SubscribeClient.RecvMsg called %d times, expected 1", len(f.RecvMsgCalls))
	}
}

// RecvMsgCalledN returns true if FakeChat_SubscribeClient.RecvMsg was called at least n times
func (f *FakeChat_SubscribeClient) RecvMsgCalledN(n int) bool {
	return len(f.RecvMsgCalls) >= n
}

// AssertRecvMsgCalledN calls t.Error if FakeChat_SubscribeClient.RecvMsg was called less than n times
func (f *FakeChat_SubscribeClient) AssertRecvMsgCalledN(t Chat_SubscribeClientTestingT, n int) {
	t.Helper()
	if len(f.RecvMsgCalls) < n {
		t.Errorf("FakeChat_SubscribeClient.RecvMsg called %d times, expected >= %d", len(f.RecvMsgCalls), n)
	}
}

// RecvMsgCalledWith returns true if FakeChat_SubscribeClient.RecvMsg was called with the given values
func (f_sym14 *FakeChat_SubscribeClient) RecvMsgCalledWith(m interface{}) bool {
	for _, call_sym14 := range f_sym14.RecvMsgCalls {
		if reflect.DeepEqual(call_sym14.Parameters.M, m) {
			return true
		}
	}

	return false
}

// AssertRecvMsgCalledWith calls t.Error if FakeChat_SubscribeClient.RecvMsg was not called with the given values
func (f_sym15 *FakeChat_SubscribeClient) AssertRecvMsgCalledWith(t Chat_SubscribeClientTestingT, m interface{}) {
	t.Helper()
	var found_sym15 bool
	for _, call_sym15 := range f_sym15.RecvMsgCalls {
		if reflect.DeepEqual(call_sym15.Parameters.M, m) {
			found_sym15 = true
			break
		}
	}

	if !found_sym15 {
		t.Error("FakeChat_SubscribeClient.RecvMsg not called with expected parameters")
	}
}

// RecvMsgCalledOnceWith returns true if FakeChat_SubscribeClient.RecvMsg was called exactly once with the given values
func (f_sym16 *FakeChat_SubscribeClient) RecvMsgCalledOnceWith(m interface{}) bool {
	var count_sym16 int
	for _, call_sym16 := range f_sym16.RecvMsgCalls {
		if reflect.DeepEqual(call_sym16.Parameters.M, m) {
			count_sym16++
		}
	}

	return count_sym16 == 1
}

// AssertRecvMsgCalledOnceWith calls t.Error if FakeChat_SubscribeClient.RecvMsg was not called exactly once with the given values
func (f_sym17 *FakeChat_SubscribeClient) AssertRecvMsgCalledOnceWith(t Chat_SubscribeClientTestingT, m interface{}) {
	t.Helper()
	var count_sym17 int
	for _, call_sym17 := range f_sym17.RecvMsgCalls {
		if reflect.DeepEqual(call_sym17.Parameters.M, m) {
			count_sym17++
		}
	}

	if count_sym17 != 1 {
		t.Errorf("FakeChat_SubscribeClient.RecvMsg called %d times with expected parameters, expected one", count_sym17)
	}
}

// RecvMsgResultsForCall returns the result values for the first call to FakeChat_SubscribeClient.RecvMsg with the given values
func (f_sym18 *FakeChat_SubscribeClient) RecvMsgResultsForCall(m interface{}) (ident58 error, found_sym18 bool) {
	for _, call_sym18 := range f_sym18.RecvMsgCalls {
		if reflect.DeepEqual(call_sym18.Parameters.M, m) {
			ident58 = call_sym18.Results.Ident58
			found_sym18 = true
			break
		}
	}

	return
}

func (f_sym19 *FakeChat_SubscribeClient) Send(ident59 *api.Message) (ident60 error) {
	if f_sym19.SendHook == nil {
		panic("Chat_SubscribeClient.Send() called but FakeChat_SubscribeClient.SendHook is nil")
	}

	invocation_sym19 := new(Chat_SubscribeClientSendInvocation)
	f_sym19.SendCalls = append(f_sym19.SendCalls, invocation_sym19)

	invocation_sym19.Parameters.Ident59 = ident59

	ident60 = f_sym19.SendHook(ident59)

	invocation_sym19.Results.Ident60 = ident60

	return
}

// SetSendStub configures Chat_SubscribeClient.Send to always return the given values
func (f_sym20 *FakeChat_SubscribeClient) SetSendStub(ident60 error) {
	f_sym20.SendHook = func(*api.Message) error {
		return ident60
	}
}

// SetSendInvocation configures Chat_SubscribeClient.Send to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym21 *FakeChat_SubscribeClient) SetSendInvocation(calls_sym21 []*Chat_SubscribeClientSendInvocation, fallback_sym21 func() error) {
	f_sym21.SendHook = func(ident59 *api.Message) (ident60 error) {
		for _, call_sym21 := range calls_sym21 {
			if reflect.DeepEqual(call_sym21.Parameters.Ident59, ident59) {
				ident60 = call_sym21.Results.Ident60

				return
			}
		}

		return fallback_sym21()
	}
}

// SendCalled returns true if FakeChat_SubscribeClient.Send was called
func (f *FakeChat_SubscribeClient) SendCalled() bool {
	return len(f.SendCalls) != 0
}

// AssertSendCalled calls t.Error if FakeChat_SubscribeClient.Send was not called
func (f *FakeChat_SubscribeClient) AssertSendCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.SendCalls) == 0 {
		t.Error("FakeChat_SubscribeClient.Send not called, expected at least one")
	}
}

// SendNotCalled returns true if FakeChat_SubscribeClient.Send was not called
func (f *FakeChat_SubscribeClient) SendNotCalled() bool {
	return len(f.SendCalls) == 0
}

// AssertSendNotCalled calls t.Error if FakeChat_SubscribeClient.Send was called
func (f *FakeChat_SubscribeClient) AssertSendNotCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.SendCalls) != 0 {
		t.Error("FakeChat_SubscribeClient.Send called, expected none")
	}
}

// SendCalledOnce returns true if FakeChat_SubscribeClient.Send was called exactly once
func (f *FakeChat_SubscribeClient) SendCalledOnce() bool {
	return len(f.SendCalls) == 1
}

// AssertSendCalledOnce calls t.Error if FakeChat_SubscribeClient.Send was not called exactly once
func (f *FakeChat_SubscribeClient) AssertSendCalledOnce(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.SendCalls) != 1 {
		t.Errorf("FakeChat_SubscribeClient.Send called %d times, expected 1", len(f.SendCalls))
	}
}

// SendCalledN returns true if FakeChat_SubscribeClient.Send was called at least n times
func (f *FakeChat_SubscribeClient) SendCalledN(n int) bool {
	return len(f.SendCalls) >= n
}

// AssertSendCalledN calls t.Error if FakeChat_SubscribeClient.Send was called less than n times
func (f *FakeChat_SubscribeClient) AssertSendCalledN(t Chat_SubscribeClientTestingT, n int) {
	t.Helper()
	if len(f.SendCalls) < n {
		t.Errorf("FakeChat_SubscribeClient.Send called %d times, expected >= %d", len(f.SendCalls), n)
	}
}

// SendCalledWith returns true if FakeChat_SubscribeClient.Send was called with the given values
func (f_sym22 *FakeChat_SubscribeClient) SendCalledWith(ident59 *api.Message) bool {
	for _, call_sym22 := range f_sym22.SendCalls {
		if reflect.DeepEqual(call_sym22.Parameters.Ident59, ident59) {
			return true
		}
	}

	return false
}

// AssertSendCalledWith calls t.Error if FakeChat_SubscribeClient.Send was not called with the given values
func (f_sym23 *FakeChat_SubscribeClient) AssertSendCalledWith(t Chat_SubscribeClientTestingT, ident59 *api.Message) {
	t.Helper()
	var found_sym23 bool
	for _, call_sym23 := range f_sym23.SendCalls {
		if reflect.DeepEqual(call_sym23.Parameters.Ident59, ident59) {
			found_sym23 = true
			break
		}
	}

	if !found_sym23 {
		t.Error("FakeChat_SubscribeClient.Send not called with expected parameters")
	}
}

// SendCalledOnceWith returns true if FakeChat_SubscribeClient.Send was called exactly once with the given values
func (f_sym24 *FakeChat_SubscribeClient) SendCalledOnceWith(ident59 *api.Message) bool {
	var count_sym24 int
	for _, call_sym24 := range f_sym24.SendCalls {
		if reflect.DeepEqual(call_sym24.Parameters.Ident59, ident59) {
			count_sym24++
		}
	}

	return count_sym24 == 1
}

// AssertSendCalledOnceWith calls t.Error if FakeChat_SubscribeClient.Send was not called exactly once with the given values
func (f_sym25 *FakeChat_SubscribeClient) AssertSendCalledOnceWith(t Chat_SubscribeClientTestingT, ident59 *api.Message) {
	t.Helper()
	var count_sym25 int
	for _, call_sym25 := range f_sym25.SendCalls {
		if reflect.DeepEqual(call_sym25.Parameters.Ident59, ident59) {
			count_sym25++
		}
	}

	if count_sym25 != 1 {
		t.Errorf("FakeChat_SubscribeClient.Send called %d times with expected parameters, expected one", count_sym25)
	}
}

// SendResultsForCall returns the result values for the first call to FakeChat_SubscribeClient.Send with the given values
func (f_sym26 *FakeChat_SubscribeClient) SendResultsForCall(ident59 *api.Message) (ident60 error, found_sym26 bool) {
	for _, call_sym26 := range f_sym26.SendCalls {
		if reflect.DeepEqual(call_sym26.Parameters.Ident59, ident59) {
			ident60 = call_sym26.Results.Ident60
			found_sym26 = true
			break
		}
	}

	return
}

func (f_sym27 *FakeChat_SubscribeClient) SendMsg(m interface{}) (ident61 error) {
	if f_sym27.SendMsgHook == nil {
		panic("Chat_SubscribeClient.SendMsg() called but FakeChat_SubscribeClient.SendMsgHook is nil")
	}

	invocation_sym27 := new(Chat_SubscribeClientSendMsgInvocation)
	f_sym27.SendMsgCalls = append(f_sym27.SendMsgCalls, invocation_sym27)

	invocation_sym27.Parameters.M = m

	ident61 = f_sym27.SendMsgHook(m)

	invocation_sym27.Results.Ident61 = ident61

	return
}

// SetSendMsgStub configures Chat_SubscribeClient.SendMsg to always return the given values
func (f_sym28 *FakeChat_SubscribeClient) SetSendMsgStub(ident61 error) {
	f_sym28.SendMsgHook = func(interface{}) error {
		return ident61
	}
}

// SetSendMsgInvocation configures Chat_SubscribeClient.SendMsg to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym29 *FakeChat_SubscribeClient) SetSendMsgInvocation(calls_sym29 []*Chat_SubscribeClientSendMsgInvocation, fallback_sym29 func() error) {
	f_sym29.SendMsgHook = func(m interface{}) (ident61 error) {
		for _, call_sym29 := range calls_sym29 {
			if reflect.DeepEqual(call_sym29.Parameters.M, m) {
				ident61 = call_sym29.Results.Ident61

				return
			}
		}

		return fallback_sym29()
	}
}

// SendMsgCalled returns true if FakeChat_SubscribeClient.SendMsg was called
func (f *FakeChat_SubscribeClient) SendMsgCalled() bool {
	return len(f.SendMsgCalls) != 0
}

// AssertSendMsgCalled calls t.Error if FakeChat_SubscribeClient.SendMsg was not called
func (f *FakeChat_SubscribeClient) AssertSendMsgCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.SendMsgCalls) == 0 {
		t.Error("FakeChat_SubscribeClient.SendMsg not called, expected at least one")
	}
}

// SendMsgNotCalled returns true if FakeChat_SubscribeClient.SendMsg was not called
func (f *FakeChat_SubscribeClient) SendMsgNotCalled() bool {
	return len(f.SendMsgCalls) == 0
}

// AssertSendMsgNotCalled calls t.Error if FakeChat_SubscribeClient.SendMsg was called
func (f *FakeChat_SubscribeClient) AssertSendMsgNotCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.SendMsgCalls) != 0 {
		t.Error("FakeChat_SubscribeClient.SendMsg called, expected none")
	}
}

// SendMsgCalledOnce returns true if FakeChat_SubscribeClient.SendMsg was called exactly once
func (f *FakeChat_SubscribeClient) SendMsgCalledOnce() bool {
	return len(f.SendMsgCalls) == 1
}

// AssertSendMsgCalledOnce calls t.Error if FakeChat_SubscribeClient.SendMsg was not called exactly once
func (f *FakeChat_SubscribeClient) AssertSendMsgCalledOnce(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.SendMsgCalls) != 1 {
		t.Errorf("FakeChat_SubscribeClient.SendMsg called %d times, expected 1", len(f.SendMsgCalls))
	}
}

// SendMsgCalledN returns true if FakeChat_SubscribeClient.SendMsg was called at least n times
func (f *FakeChat_SubscribeClient) SendMsgCalledN(n int) bool {
	return len(f.SendMsgCalls) >= n
}

// AssertSendMsgCalledN calls t.Error if FakeChat_SubscribeClient.SendMsg was called less than n times
func (f *FakeChat_SubscribeClient) AssertSendMsgCalledN(t Chat_SubscribeClientTestingT, n int) {
	t.Helper()
	if len(f.SendMsgCalls) < n {
		t.Errorf("FakeChat_SubscribeClient.SendMsg called %d times, expected >= %d", len(f.SendMsgCalls), n)
	}
}

// SendMsgCalledWith returns true if FakeChat_SubscribeClient.SendMsg was called with the given values
func (f_sym30 *FakeChat_SubscribeClient) SendMsgCalledWith(m interface{}) bool {
	for _, call_sym30 := range f_sym30.SendMsgCalls {
		if reflect.DeepEqual(call_sym30.Parameters.M, m) {
			return true
		}
	}

	return false
}

// AssertSendMsgCalledWith calls t.Error if FakeChat_SubscribeClient.SendMsg was not called with the given values
func (f_sym31 *FakeChat_SubscribeClient) AssertSendMsgCalledWith(t Chat_SubscribeClientTestingT, m interface{}) {
	t.Helper()
	var found_sym31 bool
	for _, call_sym31 := range f_sym31.SendMsgCalls {
		if reflect.DeepEqual(call_sym31.Parameters.M, m) {
			found_sym31 = true
			break
		}
	}

	if !found_sym31 {
		t.Error("FakeChat_SubscribeClient.SendMsg not called with expected parameters")
	}
}

// SendMsgCalledOnceWith returns true if FakeChat_SubscribeClient.SendMsg was called exactly once with the given values
func (f_sym32 *FakeChat_SubscribeClient) SendMsgCalledOnceWith(m interface{}) bool {
	var count_sym32 int
	for _, call_sym32 := range f_sym32.SendMsgCalls {
		if reflect.DeepEqual(call_sym32.Parameters.M, m) {
			count_sym32++
		}
	}

	return count_sym32 == 1
}

// AssertSendMsgCalledOnceWith calls t.Error if FakeChat_SubscribeClient.SendMsg was not called exactly once with the given values
func (f_sym33 *FakeChat_SubscribeClient) AssertSendMsgCalledOnceWith(t Chat_SubscribeClientTestingT, m interface{}) {
	t.Helper()
	var count_sym33 int
	for _, call_sym33 := range f_sym33.SendMsgCalls {
		if reflect.DeepEqual(call_sym33.Parameters.M, m) {
			count_sym33++
		}
	}

	if count_sym33 != 1 {
		t.Errorf("FakeChat_SubscribeClient.SendMsg called %d times with expected parameters, expected one", count_sym33)
	}
}

// SendMsgResultsForCall returns the result values for the first call to FakeChat_SubscribeClient.SendMsg with the given values
func (f_sym34 *FakeChat_SubscribeClient) SendMsgResultsForCall(m interface{}) (ident61 error, found_sym34 bool) {
	for _, call_sym34 := range f_sym34.SendMsgCalls {
		if reflect.DeepEqual(call_sym34.Parameters.M, m) {
			ident61 = call_sym34.Results.Ident61
			found_sym34 = true
			break
		}
	}

	return
}

func (f_sym35 *FakeChat_SubscribeClient) Trailer() (ident62 metadata.MD) {
	if f_sym35.TrailerHook == nil {
		panic("Chat_SubscribeClient.Trailer() called but FakeChat_SubscribeClient.TrailerHook is nil")
	}

	invocation_sym35 := new(Chat_SubscribeClientTrailerInvocation)
	f_sym35.TrailerCalls = append(f_sym35.TrailerCalls, invocation_sym35)

	ident62 = f_sym35.TrailerHook()

	invocation_sym35.Results.Ident62 = ident62

	return
}

// SetTrailerStub configures Chat_SubscribeClient.Trailer to always return the given values
func (f_sym36 *FakeChat_SubscribeClient) SetTrailerStub(ident62 metadata.MD) {
	f_sym36.TrailerHook = func() metadata.MD {
		return ident62
	}
}

// TrailerCalled returns true if FakeChat_SubscribeClient.Trailer was called
func (f *FakeChat_SubscribeClient) TrailerCalled() bool {
	return len(f.TrailerCalls) != 0
}

// AssertTrailerCalled calls t.Error if FakeChat_SubscribeClient.Trailer was not called
func (f *FakeChat_SubscribeClient) AssertTrailerCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.TrailerCalls) == 0 {
		t.Error("FakeChat_SubscribeClient.Trailer not called, expected at least one")
	}
}

// TrailerNotCalled returns true if FakeChat_SubscribeClient.Trailer was not called
func (f *FakeChat_SubscribeClient) TrailerNotCalled() bool {
	return len(f.TrailerCalls) == 0
}

// AssertTrailerNotCalled calls t.Error if FakeChat_SubscribeClient.Trailer was called
func (f *FakeChat_SubscribeClient) AssertTrailerNotCalled(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.TrailerCalls) != 0 {
		t.Error("FakeChat_SubscribeClient.Trailer called, expected none")
	}
}

// TrailerCalledOnce returns true if FakeChat_SubscribeClient.Trailer was called exactly once
func (f *FakeChat_SubscribeClient) TrailerCalledOnce() bool {
	return len(f.TrailerCalls) == 1
}

// AssertTrailerCalledOnce calls t.Error if FakeChat_SubscribeClient.Trailer was not called exactly once
func (f *FakeChat_SubscribeClient) AssertTrailerCalledOnce(t Chat_SubscribeClientTestingT) {
	t.Helper()
	if len(f.TrailerCalls) != 1 {
		t.Errorf("FakeChat_SubscribeClient.Trailer called %d times, expected 1", len(f.TrailerCalls))
	}
}

// TrailerCalledN returns true if FakeChat_SubscribeClient.Trailer was called at least n times
func (f *FakeChat_SubscribeClient) TrailerCalledN(n int) bool {
	return len(f.TrailerCalls) >= n
}

// AssertTrailerCalledN calls t.Error if FakeChat_SubscribeClient.Trailer was called less than n times
func (f *FakeChat_SubscribeClient) AssertTrailerCalledN(t Chat_SubscribeClientTestingT, n int) {
	t.Helper()
	if len(f.TrailerCalls) < n {
		t.Errorf("FakeChat_SubscribeClient.Trailer called %d times, expected >= %d", len(f.TrailerCalls), n)
	}
}

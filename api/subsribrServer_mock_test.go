// generated by "charlatan -output=subsribrServer_mock_test.go -package=charlatan Chat_SubscribeServer".  DO NOT EDIT.

package api

import (
	"reflect"

	context "golang.org/x/net/context"
	"google.golang.org/grpc/metadata"
)

// Chat_SubscribeServerContextInvocation represents a single call of FakeChat_SubscribeServer.Context
type Chat_SubscribeServerContextInvocation struct {
	Results struct {
		Ident33 context.Context
	}
}

// Chat_SubscribeServerRecvMsgInvocation represents a single call of FakeChat_SubscribeServer.RecvMsg
type Chat_SubscribeServerRecvMsgInvocation struct {
	Parameters struct {
		M interface{}
	}
	Results struct {
		Ident34 error
	}
}

// NewChat_SubscribeServerRecvMsgInvocation creates a new instance of Chat_SubscribeServerRecvMsgInvocation
func NewChat_SubscribeServerRecvMsgInvocation(m interface{}, ident34 error) *Chat_SubscribeServerRecvMsgInvocation {
	invocation := new(Chat_SubscribeServerRecvMsgInvocation)

	invocation.Parameters.M = m

	invocation.Results.Ident34 = ident34

	return invocation
}

// Chat_SubscribeServerSendHeaderInvocation represents a single call of FakeChat_SubscribeServer.SendHeader
type Chat_SubscribeServerSendHeaderInvocation struct {
	Parameters struct {
		Ident35 metadata.MD
	}
	Results struct {
		Ident36 error
	}
}

// NewChat_SubscribeServerSendHeaderInvocation creates a new instance of Chat_SubscribeServerSendHeaderInvocation
func NewChat_SubscribeServerSendHeaderInvocation(ident35 metadata.MD, ident36 error) *Chat_SubscribeServerSendHeaderInvocation {
	invocation := new(Chat_SubscribeServerSendHeaderInvocation)

	invocation.Parameters.Ident35 = ident35

	invocation.Results.Ident36 = ident36

	return invocation
}

// Chat_SubscribeServerSendMsgInvocation represents a single call of FakeChat_SubscribeServer.SendMsg
type Chat_SubscribeServerSendMsgInvocation struct {
	Parameters struct {
		M interface{}
	}
	Results struct {
		Ident37 error
	}
}

// NewChat_SubscribeServerSendMsgInvocation creates a new instance of Chat_SubscribeServerSendMsgInvocation
func NewChat_SubscribeServerSendMsgInvocation(m interface{}, ident37 error) *Chat_SubscribeServerSendMsgInvocation {
	invocation := new(Chat_SubscribeServerSendMsgInvocation)

	invocation.Parameters.M = m

	invocation.Results.Ident37 = ident37

	return invocation
}

// Chat_SubscribeServerSetHeaderInvocation represents a single call of FakeChat_SubscribeServer.SetHeader
type Chat_SubscribeServerSetHeaderInvocation struct {
	Parameters struct {
		Ident38 metadata.MD
	}
	Results struct {
		Ident39 error
	}
}

// NewChat_SubscribeServerSetHeaderInvocation creates a new instance of Chat_SubscribeServerSetHeaderInvocation
func NewChat_SubscribeServerSetHeaderInvocation(ident38 metadata.MD, ident39 error) *Chat_SubscribeServerSetHeaderInvocation {
	invocation := new(Chat_SubscribeServerSetHeaderInvocation)

	invocation.Parameters.Ident38 = ident38

	invocation.Results.Ident39 = ident39

	return invocation
}

// Chat_SubscribeServerSetTrailerInvocation represents a single call of FakeChat_SubscribeServer.SetTrailer
type Chat_SubscribeServerSetTrailerInvocation struct {
	Parameters struct {
		Ident40 metadata.MD
	}
}

// Chat_SubscribeServerSendInvocation represents a single call of FakeChat_SubscribeServer.Send
type Chat_SubscribeServerSendInvocation struct {
	Parameters struct {
		Ident1 *Message
	}
	Results struct {
		Ident2 error
	}
}

// NewChat_SubscribeServerSendInvocation creates a new instance of Chat_SubscribeServerSendInvocation
func NewChat_SubscribeServerSendInvocation(ident1 *Message, ident2 error) *Chat_SubscribeServerSendInvocation {
	invocation := new(Chat_SubscribeServerSendInvocation)

	invocation.Parameters.Ident1 = ident1

	invocation.Results.Ident2 = ident2

	return invocation
}

// Chat_SubscribeServerRecvInvocation represents a single call of FakeChat_SubscribeServer.Recv
type Chat_SubscribeServerRecvInvocation struct {
	Results struct {
		Ident1 *Message
		Ident2 error
	}
}

// Chat_SubscribeServerTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type Chat_SubscribeServerTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeChat_SubscribeServer is a mock implementation of Chat_SubscribeServer for testing.
Use it in your tests as in this example:

	package example

	func TestWithChat_SubscribeServer(t *testing.T) {
		f := &charlatan.FakeChat_SubscribeServer{
			ContextHook: func() (ident33 context.Context) {
				// ensure parameters meet expectations, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeContext ...
		f.AssertContextCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeContext.
*/
type FakeChat_SubscribeServer struct {
	ContextHook    func() context.Context
	RecvMsgHook    func(interface{}) error
	SendHeaderHook func(metadata.MD) error
	SendMsgHook    func(interface{}) error
	SetHeaderHook  func(metadata.MD) error
	SetTrailerHook func(metadata.MD)
	SendHook       func(*Message) error
	RecvHook       func() (*Message, error)

	ContextCalls    []*Chat_SubscribeServerContextInvocation
	RecvMsgCalls    []*Chat_SubscribeServerRecvMsgInvocation
	SendHeaderCalls []*Chat_SubscribeServerSendHeaderInvocation
	SendMsgCalls    []*Chat_SubscribeServerSendMsgInvocation
	SetHeaderCalls  []*Chat_SubscribeServerSetHeaderInvocation
	SetTrailerCalls []*Chat_SubscribeServerSetTrailerInvocation
	SendCalls       []*Chat_SubscribeServerSendInvocation
	RecvCalls       []*Chat_SubscribeServerRecvInvocation
}

// NewFakeChat_SubscribeServerDefaultPanic returns an instance of FakeChat_SubscribeServer with all hooks configured to panic
func NewFakeChat_SubscribeServerDefaultPanic() *FakeChat_SubscribeServer {
	return &FakeChat_SubscribeServer{
		ContextHook: func() (ident33 context.Context) {
			panic("Unexpected call to Chat_SubscribeServer.Context")
		},
		RecvMsgHook: func(interface{}) (ident34 error) {
			panic("Unexpected call to Chat_SubscribeServer.RecvMsg")
		},
		SendHeaderHook: func(metadata.MD) (ident36 error) {
			panic("Unexpected call to Chat_SubscribeServer.SendHeader")
		},
		SendMsgHook: func(interface{}) (ident37 error) {
			panic("Unexpected call to Chat_SubscribeServer.SendMsg")
		},
		SetHeaderHook: func(metadata.MD) (ident39 error) {
			panic("Unexpected call to Chat_SubscribeServer.SetHeader")
		},
		SetTrailerHook: func(metadata.MD) {
			panic("Unexpected call to Chat_SubscribeServer.SetTrailer")
		},
		SendHook: func(*Message) (ident2 error) {
			panic("Unexpected call to Chat_SubscribeServer.Send")
		},
		RecvHook: func() (ident1 *Message, ident2 error) {
			panic("Unexpected call to Chat_SubscribeServer.Recv")
		},
	}
}

// NewFakeChat_SubscribeServerDefaultFatal returns an instance of FakeChat_SubscribeServer with all hooks configured to call t.Fatal
func NewFakeChat_SubscribeServerDefaultFatal(t_sym1 Chat_SubscribeServerTestingT) *FakeChat_SubscribeServer {
	return &FakeChat_SubscribeServer{
		ContextHook: func() (ident33 context.Context) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeServer.Context")
			return
		},
		RecvMsgHook: func(interface{}) (ident34 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeServer.RecvMsg")
			return
		},
		SendHeaderHook: func(metadata.MD) (ident36 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeServer.SendHeader")
			return
		},
		SendMsgHook: func(interface{}) (ident37 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeServer.SendMsg")
			return
		},
		SetHeaderHook: func(metadata.MD) (ident39 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeServer.SetHeader")
			return
		},
		SetTrailerHook: func(metadata.MD) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeServer.SetTrailer")
			return
		},
		SendHook: func(*Message) (ident2 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeServer.Send")
			return
		},
		RecvHook: func() (ident1 *Message, ident2 error) {
			t_sym1.Fatal("Unexpected call to Chat_SubscribeServer.Recv")
			return
		},
	}
}

// NewFakeChat_SubscribeServerDefaultError returns an instance of FakeChat_SubscribeServer with all hooks configured to call t.Error
func NewFakeChat_SubscribeServerDefaultError(t_sym2 Chat_SubscribeServerTestingT) *FakeChat_SubscribeServer {
	return &FakeChat_SubscribeServer{
		ContextHook: func() (ident33 context.Context) {
			t_sym2.Error("Unexpected call to Chat_SubscribeServer.Context")
			return
		},
		RecvMsgHook: func(interface{}) (ident34 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeServer.RecvMsg")
			return
		},
		SendHeaderHook: func(metadata.MD) (ident36 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeServer.SendHeader")
			return
		},
		SendMsgHook: func(interface{}) (ident37 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeServer.SendMsg")
			return
		},
		SetHeaderHook: func(metadata.MD) (ident39 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeServer.SetHeader")
			return
		},
		SetTrailerHook: func(metadata.MD) {
			t_sym2.Error("Unexpected call to Chat_SubscribeServer.SetTrailer")
			return
		},
		SendHook: func(*Message) (ident2 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeServer.Send")
			return
		},
		RecvHook: func() (ident1 *Message, ident2 error) {
			t_sym2.Error("Unexpected call to Chat_SubscribeServer.Recv")
			return
		},
	}
}

func (f *FakeChat_SubscribeServer) Reset() {
	f.ContextCalls = []*Chat_SubscribeServerContextInvocation{}
	f.RecvMsgCalls = []*Chat_SubscribeServerRecvMsgInvocation{}
	f.SendHeaderCalls = []*Chat_SubscribeServerSendHeaderInvocation{}
	f.SendMsgCalls = []*Chat_SubscribeServerSendMsgInvocation{}
	f.SetHeaderCalls = []*Chat_SubscribeServerSetHeaderInvocation{}
	f.SetTrailerCalls = []*Chat_SubscribeServerSetTrailerInvocation{}
	f.SendCalls = []*Chat_SubscribeServerSendInvocation{}
	f.RecvCalls = []*Chat_SubscribeServerRecvInvocation{}
}

func (f_sym3 *FakeChat_SubscribeServer) Context() (ident33 context.Context) {
	if f_sym3.ContextHook == nil {
		panic("Chat_SubscribeServer.Context() called but FakeChat_SubscribeServer.ContextHook is nil")
	}

	invocation_sym3 := new(Chat_SubscribeServerContextInvocation)
	f_sym3.ContextCalls = append(f_sym3.ContextCalls, invocation_sym3)

	ident33 = f_sym3.ContextHook()

	invocation_sym3.Results.Ident33 = ident33

	return
}

// SetContextStub configures Chat_SubscribeServer.Context to always return the given values
func (f_sym4 *FakeChat_SubscribeServer) SetContextStub(ident33 context.Context) {
	f_sym4.ContextHook = func() context.Context {
		return ident33
	}
}

// ContextCalled returns true if FakeChat_SubscribeServer.Context was called
func (f *FakeChat_SubscribeServer) ContextCalled() bool {
	return len(f.ContextCalls) != 0
}

// AssertContextCalled calls t.Error if FakeChat_SubscribeServer.Context was not called
func (f *FakeChat_SubscribeServer) AssertContextCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.ContextCalls) == 0 {
		t.Error("FakeChat_SubscribeServer.Context not called, expected at least one")
	}
}

// ContextNotCalled returns true if FakeChat_SubscribeServer.Context was not called
func (f *FakeChat_SubscribeServer) ContextNotCalled() bool {
	return len(f.ContextCalls) == 0
}

// AssertContextNotCalled calls t.Error if FakeChat_SubscribeServer.Context was called
func (f *FakeChat_SubscribeServer) AssertContextNotCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.ContextCalls) != 0 {
		t.Error("FakeChat_SubscribeServer.Context called, expected none")
	}
}

// ContextCalledOnce returns true if FakeChat_SubscribeServer.Context was called exactly once
func (f *FakeChat_SubscribeServer) ContextCalledOnce() bool {
	return len(f.ContextCalls) == 1
}

// AssertContextCalledOnce calls t.Error if FakeChat_SubscribeServer.Context was not called exactly once
func (f *FakeChat_SubscribeServer) AssertContextCalledOnce(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.ContextCalls) != 1 {
		t.Errorf("FakeChat_SubscribeServer.Context called %d times, expected 1", len(f.ContextCalls))
	}
}

// ContextCalledN returns true if FakeChat_SubscribeServer.Context was called at least n times
func (f *FakeChat_SubscribeServer) ContextCalledN(n int) bool {
	return len(f.ContextCalls) >= n
}

// AssertContextCalledN calls t.Error if FakeChat_SubscribeServer.Context was called less than n times
func (f *FakeChat_SubscribeServer) AssertContextCalledN(t Chat_SubscribeServerTestingT, n int) {
	t.Helper()
	if len(f.ContextCalls) < n {
		t.Errorf("FakeChat_SubscribeServer.Context called %d times, expected >= %d", len(f.ContextCalls), n)
	}
}

func (f_sym5 *FakeChat_SubscribeServer) RecvMsg(m interface{}) (ident34 error) {
	if f_sym5.RecvMsgHook == nil {
		panic("Chat_SubscribeServer.RecvMsg() called but FakeChat_SubscribeServer.RecvMsgHook is nil")
	}

	invocation_sym5 := new(Chat_SubscribeServerRecvMsgInvocation)
	f_sym5.RecvMsgCalls = append(f_sym5.RecvMsgCalls, invocation_sym5)

	invocation_sym5.Parameters.M = m

	ident34 = f_sym5.RecvMsgHook(m)

	invocation_sym5.Results.Ident34 = ident34

	return
}

// SetRecvMsgStub configures Chat_SubscribeServer.RecvMsg to always return the given values
func (f_sym6 *FakeChat_SubscribeServer) SetRecvMsgStub(ident34 error) {
	f_sym6.RecvMsgHook = func(interface{}) error {
		return ident34
	}
}

// SetRecvMsgInvocation configures Chat_SubscribeServer.RecvMsg to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym7 *FakeChat_SubscribeServer) SetRecvMsgInvocation(calls_sym7 []*Chat_SubscribeServerRecvMsgInvocation, fallback_sym7 func() error) {
	f_sym7.RecvMsgHook = func(m interface{}) (ident34 error) {
		for _, call_sym7 := range calls_sym7 {
			if reflect.DeepEqual(call_sym7.Parameters.M, m) {
				ident34 = call_sym7.Results.Ident34

				return
			}
		}

		return fallback_sym7()
	}
}

// RecvMsgCalled returns true if FakeChat_SubscribeServer.RecvMsg was called
func (f *FakeChat_SubscribeServer) RecvMsgCalled() bool {
	return len(f.RecvMsgCalls) != 0
}

// AssertRecvMsgCalled calls t.Error if FakeChat_SubscribeServer.RecvMsg was not called
func (f *FakeChat_SubscribeServer) AssertRecvMsgCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.RecvMsgCalls) == 0 {
		t.Error("FakeChat_SubscribeServer.RecvMsg not called, expected at least one")
	}
}

// RecvMsgNotCalled returns true if FakeChat_SubscribeServer.RecvMsg was not called
func (f *FakeChat_SubscribeServer) RecvMsgNotCalled() bool {
	return len(f.RecvMsgCalls) == 0
}

// AssertRecvMsgNotCalled calls t.Error if FakeChat_SubscribeServer.RecvMsg was called
func (f *FakeChat_SubscribeServer) AssertRecvMsgNotCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.RecvMsgCalls) != 0 {
		t.Error("FakeChat_SubscribeServer.RecvMsg called, expected none")
	}
}

// RecvMsgCalledOnce returns true if FakeChat_SubscribeServer.RecvMsg was called exactly once
func (f *FakeChat_SubscribeServer) RecvMsgCalledOnce() bool {
	return len(f.RecvMsgCalls) == 1
}

// AssertRecvMsgCalledOnce calls t.Error if FakeChat_SubscribeServer.RecvMsg was not called exactly once
func (f *FakeChat_SubscribeServer) AssertRecvMsgCalledOnce(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.RecvMsgCalls) != 1 {
		t.Errorf("FakeChat_SubscribeServer.RecvMsg called %d times, expected 1", len(f.RecvMsgCalls))
	}
}

// RecvMsgCalledN returns true if FakeChat_SubscribeServer.RecvMsg was called at least n times
func (f *FakeChat_SubscribeServer) RecvMsgCalledN(n int) bool {
	return len(f.RecvMsgCalls) >= n
}

// AssertRecvMsgCalledN calls t.Error if FakeChat_SubscribeServer.RecvMsg was called less than n times
func (f *FakeChat_SubscribeServer) AssertRecvMsgCalledN(t Chat_SubscribeServerTestingT, n int) {
	t.Helper()
	if len(f.RecvMsgCalls) < n {
		t.Errorf("FakeChat_SubscribeServer.RecvMsg called %d times, expected >= %d", len(f.RecvMsgCalls), n)
	}
}

// RecvMsgCalledWith returns true if FakeChat_SubscribeServer.RecvMsg was called with the given values
func (f_sym8 *FakeChat_SubscribeServer) RecvMsgCalledWith(m interface{}) bool {
	for _, call_sym8 := range f_sym8.RecvMsgCalls {
		if reflect.DeepEqual(call_sym8.Parameters.M, m) {
			return true
		}
	}

	return false
}

// AssertRecvMsgCalledWith calls t.Error if FakeChat_SubscribeServer.RecvMsg was not called with the given values
func (f_sym9 *FakeChat_SubscribeServer) AssertRecvMsgCalledWith(t Chat_SubscribeServerTestingT, m interface{}) {
	t.Helper()
	var found_sym9 bool
	for _, call_sym9 := range f_sym9.RecvMsgCalls {
		if reflect.DeepEqual(call_sym9.Parameters.M, m) {
			found_sym9 = true
			break
		}
	}

	if !found_sym9 {
		t.Error("FakeChat_SubscribeServer.RecvMsg not called with expected parameters")
	}
}

// RecvMsgCalledOnceWith returns true if FakeChat_SubscribeServer.RecvMsg was called exactly once with the given values
func (f_sym10 *FakeChat_SubscribeServer) RecvMsgCalledOnceWith(m interface{}) bool {
	var count_sym10 int
	for _, call_sym10 := range f_sym10.RecvMsgCalls {
		if reflect.DeepEqual(call_sym10.Parameters.M, m) {
			count_sym10++
		}
	}

	return count_sym10 == 1
}

// AssertRecvMsgCalledOnceWith calls t.Error if FakeChat_SubscribeServer.RecvMsg was not called exactly once with the given values
func (f_sym11 *FakeChat_SubscribeServer) AssertRecvMsgCalledOnceWith(t Chat_SubscribeServerTestingT, m interface{}) {
	t.Helper()
	var count_sym11 int
	for _, call_sym11 := range f_sym11.RecvMsgCalls {
		if reflect.DeepEqual(call_sym11.Parameters.M, m) {
			count_sym11++
		}
	}

	if count_sym11 != 1 {
		t.Errorf("FakeChat_SubscribeServer.RecvMsg called %d times with expected parameters, expected one", count_sym11)
	}
}

// RecvMsgResultsForCall returns the result values for the first call to FakeChat_SubscribeServer.RecvMsg with the given values
func (f_sym12 *FakeChat_SubscribeServer) RecvMsgResultsForCall(m interface{}) (ident34 error, found_sym12 bool) {
	for _, call_sym12 := range f_sym12.RecvMsgCalls {
		if reflect.DeepEqual(call_sym12.Parameters.M, m) {
			ident34 = call_sym12.Results.Ident34
			found_sym12 = true
			break
		}
	}

	return
}

func (f_sym13 *FakeChat_SubscribeServer) SendHeader(ident35 metadata.MD) (ident36 error) {
	if f_sym13.SendHeaderHook == nil {
		panic("Chat_SubscribeServer.SendHeader() called but FakeChat_SubscribeServer.SendHeaderHook is nil")
	}

	invocation_sym13 := new(Chat_SubscribeServerSendHeaderInvocation)
	f_sym13.SendHeaderCalls = append(f_sym13.SendHeaderCalls, invocation_sym13)

	invocation_sym13.Parameters.Ident35 = ident35

	ident36 = f_sym13.SendHeaderHook(ident35)

	invocation_sym13.Results.Ident36 = ident36

	return
}

// SetSendHeaderStub configures Chat_SubscribeServer.SendHeader to always return the given values
func (f_sym14 *FakeChat_SubscribeServer) SetSendHeaderStub(ident36 error) {
	f_sym14.SendHeaderHook = func(metadata.MD) error {
		return ident36
	}
}

// SetSendHeaderInvocation configures Chat_SubscribeServer.SendHeader to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym15 *FakeChat_SubscribeServer) SetSendHeaderInvocation(calls_sym15 []*Chat_SubscribeServerSendHeaderInvocation, fallback_sym15 func() error) {
	f_sym15.SendHeaderHook = func(ident35 metadata.MD) (ident36 error) {
		for _, call_sym15 := range calls_sym15 {
			if reflect.DeepEqual(call_sym15.Parameters.Ident35, ident35) {
				ident36 = call_sym15.Results.Ident36

				return
			}
		}

		return fallback_sym15()
	}
}

// SendHeaderCalled returns true if FakeChat_SubscribeServer.SendHeader was called
func (f *FakeChat_SubscribeServer) SendHeaderCalled() bool {
	return len(f.SendHeaderCalls) != 0
}

// AssertSendHeaderCalled calls t.Error if FakeChat_SubscribeServer.SendHeader was not called
func (f *FakeChat_SubscribeServer) AssertSendHeaderCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendHeaderCalls) == 0 {
		t.Error("FakeChat_SubscribeServer.SendHeader not called, expected at least one")
	}
}

// SendHeaderNotCalled returns true if FakeChat_SubscribeServer.SendHeader was not called
func (f *FakeChat_SubscribeServer) SendHeaderNotCalled() bool {
	return len(f.SendHeaderCalls) == 0
}

// AssertSendHeaderNotCalled calls t.Error if FakeChat_SubscribeServer.SendHeader was called
func (f *FakeChat_SubscribeServer) AssertSendHeaderNotCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendHeaderCalls) != 0 {
		t.Error("FakeChat_SubscribeServer.SendHeader called, expected none")
	}
}

// SendHeaderCalledOnce returns true if FakeChat_SubscribeServer.SendHeader was called exactly once
func (f *FakeChat_SubscribeServer) SendHeaderCalledOnce() bool {
	return len(f.SendHeaderCalls) == 1
}

// AssertSendHeaderCalledOnce calls t.Error if FakeChat_SubscribeServer.SendHeader was not called exactly once
func (f *FakeChat_SubscribeServer) AssertSendHeaderCalledOnce(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendHeaderCalls) != 1 {
		t.Errorf("FakeChat_SubscribeServer.SendHeader called %d times, expected 1", len(f.SendHeaderCalls))
	}
}

// SendHeaderCalledN returns true if FakeChat_SubscribeServer.SendHeader was called at least n times
func (f *FakeChat_SubscribeServer) SendHeaderCalledN(n int) bool {
	return len(f.SendHeaderCalls) >= n
}

// AssertSendHeaderCalledN calls t.Error if FakeChat_SubscribeServer.SendHeader was called less than n times
func (f *FakeChat_SubscribeServer) AssertSendHeaderCalledN(t Chat_SubscribeServerTestingT, n int) {
	t.Helper()
	if len(f.SendHeaderCalls) < n {
		t.Errorf("FakeChat_SubscribeServer.SendHeader called %d times, expected >= %d", len(f.SendHeaderCalls), n)
	}
}

// SendHeaderCalledWith returns true if FakeChat_SubscribeServer.SendHeader was called with the given values
func (f_sym16 *FakeChat_SubscribeServer) SendHeaderCalledWith(ident35 metadata.MD) bool {
	for _, call_sym16 := range f_sym16.SendHeaderCalls {
		if reflect.DeepEqual(call_sym16.Parameters.Ident35, ident35) {
			return true
		}
	}

	return false
}

// AssertSendHeaderCalledWith calls t.Error if FakeChat_SubscribeServer.SendHeader was not called with the given values
func (f_sym17 *FakeChat_SubscribeServer) AssertSendHeaderCalledWith(t Chat_SubscribeServerTestingT, ident35 metadata.MD) {
	t.Helper()
	var found_sym17 bool
	for _, call_sym17 := range f_sym17.SendHeaderCalls {
		if reflect.DeepEqual(call_sym17.Parameters.Ident35, ident35) {
			found_sym17 = true
			break
		}
	}

	if !found_sym17 {
		t.Error("FakeChat_SubscribeServer.SendHeader not called with expected parameters")
	}
}

// SendHeaderCalledOnceWith returns true if FakeChat_SubscribeServer.SendHeader was called exactly once with the given values
func (f_sym18 *FakeChat_SubscribeServer) SendHeaderCalledOnceWith(ident35 metadata.MD) bool {
	var count_sym18 int
	for _, call_sym18 := range f_sym18.SendHeaderCalls {
		if reflect.DeepEqual(call_sym18.Parameters.Ident35, ident35) {
			count_sym18++
		}
	}

	return count_sym18 == 1
}

// AssertSendHeaderCalledOnceWith calls t.Error if FakeChat_SubscribeServer.SendHeader was not called exactly once with the given values
func (f_sym19 *FakeChat_SubscribeServer) AssertSendHeaderCalledOnceWith(t Chat_SubscribeServerTestingT, ident35 metadata.MD) {
	t.Helper()
	var count_sym19 int
	for _, call_sym19 := range f_sym19.SendHeaderCalls {
		if reflect.DeepEqual(call_sym19.Parameters.Ident35, ident35) {
			count_sym19++
		}
	}

	if count_sym19 != 1 {
		t.Errorf("FakeChat_SubscribeServer.SendHeader called %d times with expected parameters, expected one", count_sym19)
	}
}

// SendHeaderResultsForCall returns the result values for the first call to FakeChat_SubscribeServer.SendHeader with the given values
func (f_sym20 *FakeChat_SubscribeServer) SendHeaderResultsForCall(ident35 metadata.MD) (ident36 error, found_sym20 bool) {
	for _, call_sym20 := range f_sym20.SendHeaderCalls {
		if reflect.DeepEqual(call_sym20.Parameters.Ident35, ident35) {
			ident36 = call_sym20.Results.Ident36
			found_sym20 = true
			break
		}
	}

	return
}

func (f_sym21 *FakeChat_SubscribeServer) SendMsg(m interface{}) (ident37 error) {
	if f_sym21.SendMsgHook == nil {
		panic("Chat_SubscribeServer.SendMsg() called but FakeChat_SubscribeServer.SendMsgHook is nil")
	}

	invocation_sym21 := new(Chat_SubscribeServerSendMsgInvocation)
	f_sym21.SendMsgCalls = append(f_sym21.SendMsgCalls, invocation_sym21)

	invocation_sym21.Parameters.M = m

	ident37 = f_sym21.SendMsgHook(m)

	invocation_sym21.Results.Ident37 = ident37

	return
}

// SetSendMsgStub configures Chat_SubscribeServer.SendMsg to always return the given values
func (f_sym22 *FakeChat_SubscribeServer) SetSendMsgStub(ident37 error) {
	f_sym22.SendMsgHook = func(interface{}) error {
		return ident37
	}
}

// SetSendMsgInvocation configures Chat_SubscribeServer.SendMsg to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym23 *FakeChat_SubscribeServer) SetSendMsgInvocation(calls_sym23 []*Chat_SubscribeServerSendMsgInvocation, fallback_sym23 func() error) {
	f_sym23.SendMsgHook = func(m interface{}) (ident37 error) {
		for _, call_sym23 := range calls_sym23 {
			if reflect.DeepEqual(call_sym23.Parameters.M, m) {
				ident37 = call_sym23.Results.Ident37

				return
			}
		}

		return fallback_sym23()
	}
}

// SendMsgCalled returns true if FakeChat_SubscribeServer.SendMsg was called
func (f *FakeChat_SubscribeServer) SendMsgCalled() bool {
	return len(f.SendMsgCalls) != 0
}

// AssertSendMsgCalled calls t.Error if FakeChat_SubscribeServer.SendMsg was not called
func (f *FakeChat_SubscribeServer) AssertSendMsgCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendMsgCalls) == 0 {
		t.Error("FakeChat_SubscribeServer.SendMsg not called, expected at least one")
	}
}

// SendMsgNotCalled returns true if FakeChat_SubscribeServer.SendMsg was not called
func (f *FakeChat_SubscribeServer) SendMsgNotCalled() bool {
	return len(f.SendMsgCalls) == 0
}

// AssertSendMsgNotCalled calls t.Error if FakeChat_SubscribeServer.SendMsg was called
func (f *FakeChat_SubscribeServer) AssertSendMsgNotCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendMsgCalls) != 0 {
		t.Error("FakeChat_SubscribeServer.SendMsg called, expected none")
	}
}

// SendMsgCalledOnce returns true if FakeChat_SubscribeServer.SendMsg was called exactly once
func (f *FakeChat_SubscribeServer) SendMsgCalledOnce() bool {
	return len(f.SendMsgCalls) == 1
}

// AssertSendMsgCalledOnce calls t.Error if FakeChat_SubscribeServer.SendMsg was not called exactly once
func (f *FakeChat_SubscribeServer) AssertSendMsgCalledOnce(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendMsgCalls) != 1 {
		t.Errorf("FakeChat_SubscribeServer.SendMsg called %d times, expected 1", len(f.SendMsgCalls))
	}
}

// SendMsgCalledN returns true if FakeChat_SubscribeServer.SendMsg was called at least n times
func (f *FakeChat_SubscribeServer) SendMsgCalledN(n int) bool {
	return len(f.SendMsgCalls) >= n
}

// AssertSendMsgCalledN calls t.Error if FakeChat_SubscribeServer.SendMsg was called less than n times
func (f *FakeChat_SubscribeServer) AssertSendMsgCalledN(t Chat_SubscribeServerTestingT, n int) {
	t.Helper()
	if len(f.SendMsgCalls) < n {
		t.Errorf("FakeChat_SubscribeServer.SendMsg called %d times, expected >= %d", len(f.SendMsgCalls), n)
	}
}

// SendMsgCalledWith returns true if FakeChat_SubscribeServer.SendMsg was called with the given values
func (f_sym24 *FakeChat_SubscribeServer) SendMsgCalledWith(m interface{}) bool {
	for _, call_sym24 := range f_sym24.SendMsgCalls {
		if reflect.DeepEqual(call_sym24.Parameters.M, m) {
			return true
		}
	}

	return false
}

// AssertSendMsgCalledWith calls t.Error if FakeChat_SubscribeServer.SendMsg was not called with the given values
func (f_sym25 *FakeChat_SubscribeServer) AssertSendMsgCalledWith(t Chat_SubscribeServerTestingT, m interface{}) {
	t.Helper()
	var found_sym25 bool
	for _, call_sym25 := range f_sym25.SendMsgCalls {
		if reflect.DeepEqual(call_sym25.Parameters.M, m) {
			found_sym25 = true
			break
		}
	}

	if !found_sym25 {
		t.Error("FakeChat_SubscribeServer.SendMsg not called with expected parameters")
	}
}

// SendMsgCalledOnceWith returns true if FakeChat_SubscribeServer.SendMsg was called exactly once with the given values
func (f_sym26 *FakeChat_SubscribeServer) SendMsgCalledOnceWith(m interface{}) bool {
	var count_sym26 int
	for _, call_sym26 := range f_sym26.SendMsgCalls {
		if reflect.DeepEqual(call_sym26.Parameters.M, m) {
			count_sym26++
		}
	}

	return count_sym26 == 1
}

// AssertSendMsgCalledOnceWith calls t.Error if FakeChat_SubscribeServer.SendMsg was not called exactly once with the given values
func (f_sym27 *FakeChat_SubscribeServer) AssertSendMsgCalledOnceWith(t Chat_SubscribeServerTestingT, m interface{}) {
	t.Helper()
	var count_sym27 int
	for _, call_sym27 := range f_sym27.SendMsgCalls {
		if reflect.DeepEqual(call_sym27.Parameters.M, m) {
			count_sym27++
		}
	}

	if count_sym27 != 1 {
		t.Errorf("FakeChat_SubscribeServer.SendMsg called %d times with expected parameters, expected one", count_sym27)
	}
}

// SendMsgResultsForCall returns the result values for the first call to FakeChat_SubscribeServer.SendMsg with the given values
func (f_sym28 *FakeChat_SubscribeServer) SendMsgResultsForCall(m interface{}) (ident37 error, found_sym28 bool) {
	for _, call_sym28 := range f_sym28.SendMsgCalls {
		if reflect.DeepEqual(call_sym28.Parameters.M, m) {
			ident37 = call_sym28.Results.Ident37
			found_sym28 = true
			break
		}
	}

	return
}

func (f_sym29 *FakeChat_SubscribeServer) SetHeader(ident38 metadata.MD) (ident39 error) {
	if f_sym29.SetHeaderHook == nil {
		panic("Chat_SubscribeServer.SetHeader() called but FakeChat_SubscribeServer.SetHeaderHook is nil")
	}

	invocation_sym29 := new(Chat_SubscribeServerSetHeaderInvocation)
	f_sym29.SetHeaderCalls = append(f_sym29.SetHeaderCalls, invocation_sym29)

	invocation_sym29.Parameters.Ident38 = ident38

	ident39 = f_sym29.SetHeaderHook(ident38)

	invocation_sym29.Results.Ident39 = ident39

	return
}

// SetSetHeaderStub configures Chat_SubscribeServer.SetHeader to always return the given values
func (f_sym30 *FakeChat_SubscribeServer) SetSetHeaderStub(ident39 error) {
	f_sym30.SetHeaderHook = func(metadata.MD) error {
		return ident39
	}
}

// SetSetHeaderInvocation configures Chat_SubscribeServer.SetHeader to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym31 *FakeChat_SubscribeServer) SetSetHeaderInvocation(calls_sym31 []*Chat_SubscribeServerSetHeaderInvocation, fallback_sym31 func() error) {
	f_sym31.SetHeaderHook = func(ident38 metadata.MD) (ident39 error) {
		for _, call_sym31 := range calls_sym31 {
			if reflect.DeepEqual(call_sym31.Parameters.Ident38, ident38) {
				ident39 = call_sym31.Results.Ident39

				return
			}
		}

		return fallback_sym31()
	}
}

// SetHeaderCalled returns true if FakeChat_SubscribeServer.SetHeader was called
func (f *FakeChat_SubscribeServer) SetHeaderCalled() bool {
	return len(f.SetHeaderCalls) != 0
}

// AssertSetHeaderCalled calls t.Error if FakeChat_SubscribeServer.SetHeader was not called
func (f *FakeChat_SubscribeServer) AssertSetHeaderCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SetHeaderCalls) == 0 {
		t.Error("FakeChat_SubscribeServer.SetHeader not called, expected at least one")
	}
}

// SetHeaderNotCalled returns true if FakeChat_SubscribeServer.SetHeader was not called
func (f *FakeChat_SubscribeServer) SetHeaderNotCalled() bool {
	return len(f.SetHeaderCalls) == 0
}

// AssertSetHeaderNotCalled calls t.Error if FakeChat_SubscribeServer.SetHeader was called
func (f *FakeChat_SubscribeServer) AssertSetHeaderNotCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SetHeaderCalls) != 0 {
		t.Error("FakeChat_SubscribeServer.SetHeader called, expected none")
	}
}

// SetHeaderCalledOnce returns true if FakeChat_SubscribeServer.SetHeader was called exactly once
func (f *FakeChat_SubscribeServer) SetHeaderCalledOnce() bool {
	return len(f.SetHeaderCalls) == 1
}

// AssertSetHeaderCalledOnce calls t.Error if FakeChat_SubscribeServer.SetHeader was not called exactly once
func (f *FakeChat_SubscribeServer) AssertSetHeaderCalledOnce(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SetHeaderCalls) != 1 {
		t.Errorf("FakeChat_SubscribeServer.SetHeader called %d times, expected 1", len(f.SetHeaderCalls))
	}
}

// SetHeaderCalledN returns true if FakeChat_SubscribeServer.SetHeader was called at least n times
func (f *FakeChat_SubscribeServer) SetHeaderCalledN(n int) bool {
	return len(f.SetHeaderCalls) >= n
}

// AssertSetHeaderCalledN calls t.Error if FakeChat_SubscribeServer.SetHeader was called less than n times
func (f *FakeChat_SubscribeServer) AssertSetHeaderCalledN(t Chat_SubscribeServerTestingT, n int) {
	t.Helper()
	if len(f.SetHeaderCalls) < n {
		t.Errorf("FakeChat_SubscribeServer.SetHeader called %d times, expected >= %d", len(f.SetHeaderCalls), n)
	}
}

// SetHeaderCalledWith returns true if FakeChat_SubscribeServer.SetHeader was called with the given values
func (f_sym32 *FakeChat_SubscribeServer) SetHeaderCalledWith(ident38 metadata.MD) bool {
	for _, call_sym32 := range f_sym32.SetHeaderCalls {
		if reflect.DeepEqual(call_sym32.Parameters.Ident38, ident38) {
			return true
		}
	}

	return false
}

// AssertSetHeaderCalledWith calls t.Error if FakeChat_SubscribeServer.SetHeader was not called with the given values
func (f_sym33 *FakeChat_SubscribeServer) AssertSetHeaderCalledWith(t Chat_SubscribeServerTestingT, ident38 metadata.MD) {
	t.Helper()
	var found_sym33 bool
	for _, call_sym33 := range f_sym33.SetHeaderCalls {
		if reflect.DeepEqual(call_sym33.Parameters.Ident38, ident38) {
			found_sym33 = true
			break
		}
	}

	if !found_sym33 {
		t.Error("FakeChat_SubscribeServer.SetHeader not called with expected parameters")
	}
}

// SetHeaderCalledOnceWith returns true if FakeChat_SubscribeServer.SetHeader was called exactly once with the given values
func (f_sym34 *FakeChat_SubscribeServer) SetHeaderCalledOnceWith(ident38 metadata.MD) bool {
	var count_sym34 int
	for _, call_sym34 := range f_sym34.SetHeaderCalls {
		if reflect.DeepEqual(call_sym34.Parameters.Ident38, ident38) {
			count_sym34++
		}
	}

	return count_sym34 == 1
}

// AssertSetHeaderCalledOnceWith calls t.Error if FakeChat_SubscribeServer.SetHeader was not called exactly once with the given values
func (f_sym35 *FakeChat_SubscribeServer) AssertSetHeaderCalledOnceWith(t Chat_SubscribeServerTestingT, ident38 metadata.MD) {
	t.Helper()
	var count_sym35 int
	for _, call_sym35 := range f_sym35.SetHeaderCalls {
		if reflect.DeepEqual(call_sym35.Parameters.Ident38, ident38) {
			count_sym35++
		}
	}

	if count_sym35 != 1 {
		t.Errorf("FakeChat_SubscribeServer.SetHeader called %d times with expected parameters, expected one", count_sym35)
	}
}

// SetHeaderResultsForCall returns the result values for the first call to FakeChat_SubscribeServer.SetHeader with the given values
func (f_sym36 *FakeChat_SubscribeServer) SetHeaderResultsForCall(ident38 metadata.MD) (ident39 error, found_sym36 bool) {
	for _, call_sym36 := range f_sym36.SetHeaderCalls {
		if reflect.DeepEqual(call_sym36.Parameters.Ident38, ident38) {
			ident39 = call_sym36.Results.Ident39
			found_sym36 = true
			break
		}
	}

	return
}

func (f_sym37 *FakeChat_SubscribeServer) SetTrailer(ident40 metadata.MD) {
	if f_sym37.SetTrailerHook == nil {
		panic("Chat_SubscribeServer.SetTrailer() called but FakeChat_SubscribeServer.SetTrailerHook is nil")
	}

	invocation_sym37 := new(Chat_SubscribeServerSetTrailerInvocation)
	f_sym37.SetTrailerCalls = append(f_sym37.SetTrailerCalls, invocation_sym37)

	invocation_sym37.Parameters.Ident40 = ident40

	f_sym37.SetTrailerHook(ident40)

	return
}

// SetTrailerCalled returns true if FakeChat_SubscribeServer.SetTrailer was called
func (f *FakeChat_SubscribeServer) SetTrailerCalled() bool {
	return len(f.SetTrailerCalls) != 0
}

// AssertSetTrailerCalled calls t.Error if FakeChat_SubscribeServer.SetTrailer was not called
func (f *FakeChat_SubscribeServer) AssertSetTrailerCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SetTrailerCalls) == 0 {
		t.Error("FakeChat_SubscribeServer.SetTrailer not called, expected at least one")
	}
}

// SetTrailerNotCalled returns true if FakeChat_SubscribeServer.SetTrailer was not called
func (f *FakeChat_SubscribeServer) SetTrailerNotCalled() bool {
	return len(f.SetTrailerCalls) == 0
}

// AssertSetTrailerNotCalled calls t.Error if FakeChat_SubscribeServer.SetTrailer was called
func (f *FakeChat_SubscribeServer) AssertSetTrailerNotCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SetTrailerCalls) != 0 {
		t.Error("FakeChat_SubscribeServer.SetTrailer called, expected none")
	}
}

// SetTrailerCalledOnce returns true if FakeChat_SubscribeServer.SetTrailer was called exactly once
func (f *FakeChat_SubscribeServer) SetTrailerCalledOnce() bool {
	return len(f.SetTrailerCalls) == 1
}

// AssertSetTrailerCalledOnce calls t.Error if FakeChat_SubscribeServer.SetTrailer was not called exactly once
func (f *FakeChat_SubscribeServer) AssertSetTrailerCalledOnce(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SetTrailerCalls) != 1 {
		t.Errorf("FakeChat_SubscribeServer.SetTrailer called %d times, expected 1", len(f.SetTrailerCalls))
	}
}

// SetTrailerCalledN returns true if FakeChat_SubscribeServer.SetTrailer was called at least n times
func (f *FakeChat_SubscribeServer) SetTrailerCalledN(n int) bool {
	return len(f.SetTrailerCalls) >= n
}

// AssertSetTrailerCalledN calls t.Error if FakeChat_SubscribeServer.SetTrailer was called less than n times
func (f *FakeChat_SubscribeServer) AssertSetTrailerCalledN(t Chat_SubscribeServerTestingT, n int) {
	t.Helper()
	if len(f.SetTrailerCalls) < n {
		t.Errorf("FakeChat_SubscribeServer.SetTrailer called %d times, expected >= %d", len(f.SetTrailerCalls), n)
	}
}

// SetTrailerCalledWith returns true if FakeChat_SubscribeServer.SetTrailer was called with the given values
func (f_sym38 *FakeChat_SubscribeServer) SetTrailerCalledWith(ident40 metadata.MD) bool {
	for _, call_sym38 := range f_sym38.SetTrailerCalls {
		if reflect.DeepEqual(call_sym38.Parameters.Ident40, ident40) {
			return true
		}
	}

	return false
}

// AssertSetTrailerCalledWith calls t.Error if FakeChat_SubscribeServer.SetTrailer was not called with the given values
func (f_sym39 *FakeChat_SubscribeServer) AssertSetTrailerCalledWith(t Chat_SubscribeServerTestingT, ident40 metadata.MD) {
	t.Helper()
	var found_sym39 bool
	for _, call_sym39 := range f_sym39.SetTrailerCalls {
		if reflect.DeepEqual(call_sym39.Parameters.Ident40, ident40) {
			found_sym39 = true
			break
		}
	}

	if !found_sym39 {
		t.Error("FakeChat_SubscribeServer.SetTrailer not called with expected parameters")
	}
}

// SetTrailerCalledOnceWith returns true if FakeChat_SubscribeServer.SetTrailer was called exactly once with the given values
func (f_sym40 *FakeChat_SubscribeServer) SetTrailerCalledOnceWith(ident40 metadata.MD) bool {
	var count_sym40 int
	for _, call_sym40 := range f_sym40.SetTrailerCalls {
		if reflect.DeepEqual(call_sym40.Parameters.Ident40, ident40) {
			count_sym40++
		}
	}

	return count_sym40 == 1
}

// AssertSetTrailerCalledOnceWith calls t.Error if FakeChat_SubscribeServer.SetTrailer was not called exactly once with the given values
func (f_sym41 *FakeChat_SubscribeServer) AssertSetTrailerCalledOnceWith(t Chat_SubscribeServerTestingT, ident40 metadata.MD) {
	t.Helper()
	var count_sym41 int
	for _, call_sym41 := range f_sym41.SetTrailerCalls {
		if reflect.DeepEqual(call_sym41.Parameters.Ident40, ident40) {
			count_sym41++
		}
	}

	if count_sym41 != 1 {
		t.Errorf("FakeChat_SubscribeServer.SetTrailer called %d times with expected parameters, expected one", count_sym41)
	}
}

func (f_sym42 *FakeChat_SubscribeServer) Send(ident1 *Message) (ident2 error) {
	if f_sym42.SendHook == nil {
		panic("Chat_SubscribeServer.Send() called but FakeChat_SubscribeServer.SendHook is nil")
	}

	invocation_sym42 := new(Chat_SubscribeServerSendInvocation)
	f_sym42.SendCalls = append(f_sym42.SendCalls, invocation_sym42)

	invocation_sym42.Parameters.Ident1 = ident1

	ident2 = f_sym42.SendHook(ident1)

	invocation_sym42.Results.Ident2 = ident2

	return
}

// SetSendStub configures Chat_SubscribeServer.Send to always return the given values
func (f_sym43 *FakeChat_SubscribeServer) SetSendStub(ident2 error) {
	f_sym43.SendHook = func(*Message) error {
		return ident2
	}
}

// SetSendInvocation configures Chat_SubscribeServer.Send to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym44 *FakeChat_SubscribeServer) SetSendInvocation(calls_sym44 []*Chat_SubscribeServerSendInvocation, fallback_sym44 func() error) {
	f_sym44.SendHook = func(ident1 *Message) (ident2 error) {
		for _, call_sym44 := range calls_sym44 {
			if reflect.DeepEqual(call_sym44.Parameters.Ident1, ident1) {
				ident2 = call_sym44.Results.Ident2

				return
			}
		}

		return fallback_sym44()
	}
}

// SendCalled returns true if FakeChat_SubscribeServer.Send was called
func (f *FakeChat_SubscribeServer) SendCalled() bool {
	return len(f.SendCalls) != 0
}

// AssertSendCalled calls t.Error if FakeChat_SubscribeServer.Send was not called
func (f *FakeChat_SubscribeServer) AssertSendCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendCalls) == 0 {
		t.Error("FakeChat_SubscribeServer.Send not called, expected at least one")
	}
}

// SendNotCalled returns true if FakeChat_SubscribeServer.Send was not called
func (f *FakeChat_SubscribeServer) SendNotCalled() bool {
	return len(f.SendCalls) == 0
}

// AssertSendNotCalled calls t.Error if FakeChat_SubscribeServer.Send was called
func (f *FakeChat_SubscribeServer) AssertSendNotCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendCalls) != 0 {
		t.Error("FakeChat_SubscribeServer.Send called, expected none")
	}
}

// SendCalledOnce returns true if FakeChat_SubscribeServer.Send was called exactly once
func (f *FakeChat_SubscribeServer) SendCalledOnce() bool {
	return len(f.SendCalls) == 1
}

// AssertSendCalledOnce calls t.Error if FakeChat_SubscribeServer.Send was not called exactly once
func (f *FakeChat_SubscribeServer) AssertSendCalledOnce(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.SendCalls) != 1 {
		t.Errorf("FakeChat_SubscribeServer.Send called %d times, expected 1", len(f.SendCalls))
	}
}

// SendCalledN returns true if FakeChat_SubscribeServer.Send was called at least n times
func (f *FakeChat_SubscribeServer) SendCalledN(n int) bool {
	return len(f.SendCalls) >= n
}

// AssertSendCalledN calls t.Error if FakeChat_SubscribeServer.Send was called less than n times
func (f *FakeChat_SubscribeServer) AssertSendCalledN(t Chat_SubscribeServerTestingT, n int) {
	t.Helper()
	if len(f.SendCalls) < n {
		t.Errorf("FakeChat_SubscribeServer.Send called %d times, expected >= %d", len(f.SendCalls), n)
	}
}

// SendCalledWith returns true if FakeChat_SubscribeServer.Send was called with the given values
func (f_sym45 *FakeChat_SubscribeServer) SendCalledWith(ident1 *Message) bool {
	for _, call_sym45 := range f_sym45.SendCalls {
		if reflect.DeepEqual(call_sym45.Parameters.Ident1, ident1) {
			return true
		}
	}

	return false
}

// AssertSendCalledWith calls t.Error if FakeChat_SubscribeServer.Send was not called with the given values
func (f_sym46 *FakeChat_SubscribeServer) AssertSendCalledWith(t Chat_SubscribeServerTestingT, ident1 *Message) {
	t.Helper()
	var found_sym46 bool
	for _, call_sym46 := range f_sym46.SendCalls {
		if reflect.DeepEqual(call_sym46.Parameters.Ident1, ident1) {
			found_sym46 = true
			break
		}
	}

	if !found_sym46 {
		t.Error("FakeChat_SubscribeServer.Send not called with expected parameters")
	}
}

// SendCalledOnceWith returns true if FakeChat_SubscribeServer.Send was called exactly once with the given values
func (f_sym47 *FakeChat_SubscribeServer) SendCalledOnceWith(ident1 *Message) bool {
	var count_sym47 int
	for _, call_sym47 := range f_sym47.SendCalls {
		if reflect.DeepEqual(call_sym47.Parameters.Ident1, ident1) {
			count_sym47++
		}
	}

	return count_sym47 == 1
}

// AssertSendCalledOnceWith calls t.Error if FakeChat_SubscribeServer.Send was not called exactly once with the given values
func (f_sym48 *FakeChat_SubscribeServer) AssertSendCalledOnceWith(t Chat_SubscribeServerTestingT, ident1 *Message) {
	t.Helper()
	var count_sym48 int
	for _, call_sym48 := range f_sym48.SendCalls {
		if reflect.DeepEqual(call_sym48.Parameters.Ident1, ident1) {
			count_sym48++
		}
	}

	if count_sym48 != 1 {
		t.Errorf("FakeChat_SubscribeServer.Send called %d times with expected parameters, expected one", count_sym48)
	}
}

// SendResultsForCall returns the result values for the first call to FakeChat_SubscribeServer.Send with the given values
func (f_sym49 *FakeChat_SubscribeServer) SendResultsForCall(ident1 *Message) (ident2 error, found_sym49 bool) {
	for _, call_sym49 := range f_sym49.SendCalls {
		if reflect.DeepEqual(call_sym49.Parameters.Ident1, ident1) {
			ident2 = call_sym49.Results.Ident2
			found_sym49 = true
			break
		}
	}

	return
}

func (f_sym50 *FakeChat_SubscribeServer) Recv() (ident1 *Message, ident2 error) {
	if f_sym50.RecvHook == nil {
		panic("Chat_SubscribeServer.Recv() called but FakeChat_SubscribeServer.RecvHook is nil")
	}

	invocation_sym50 := new(Chat_SubscribeServerRecvInvocation)
	f_sym50.RecvCalls = append(f_sym50.RecvCalls, invocation_sym50)

	ident1, ident2 = f_sym50.RecvHook()

	invocation_sym50.Results.Ident1 = ident1
	invocation_sym50.Results.Ident2 = ident2

	return
}

// SetRecvStub configures Chat_SubscribeServer.Recv to always return the given values
func (f_sym51 *FakeChat_SubscribeServer) SetRecvStub(ident1 *Message, ident2 error) {
	f_sym51.RecvHook = func() (*Message, error) {
		return ident1, ident2
	}
}

// RecvCalled returns true if FakeChat_SubscribeServer.Recv was called
func (f *FakeChat_SubscribeServer) RecvCalled() bool {
	return len(f.RecvCalls) != 0
}

// AssertRecvCalled calls t.Error if FakeChat_SubscribeServer.Recv was not called
func (f *FakeChat_SubscribeServer) AssertRecvCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.RecvCalls) == 0 {
		t.Error("FakeChat_SubscribeServer.Recv not called, expected at least one")
	}
}

// RecvNotCalled returns true if FakeChat_SubscribeServer.Recv was not called
func (f *FakeChat_SubscribeServer) RecvNotCalled() bool {
	return len(f.RecvCalls) == 0
}

// AssertRecvNotCalled calls t.Error if FakeChat_SubscribeServer.Recv was called
func (f *FakeChat_SubscribeServer) AssertRecvNotCalled(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.RecvCalls) != 0 {
		t.Error("FakeChat_SubscribeServer.Recv called, expected none")
	}
}

// RecvCalledOnce returns true if FakeChat_SubscribeServer.Recv was called exactly once
func (f *FakeChat_SubscribeServer) RecvCalledOnce() bool {
	return len(f.RecvCalls) == 1
}

// AssertRecvCalledOnce calls t.Error if FakeChat_SubscribeServer.Recv was not called exactly once
func (f *FakeChat_SubscribeServer) AssertRecvCalledOnce(t Chat_SubscribeServerTestingT) {
	t.Helper()
	if len(f.RecvCalls) != 1 {
		t.Errorf("FakeChat_SubscribeServer.Recv called %d times, expected 1", len(f.RecvCalls))
	}
}

// RecvCalledN returns true if FakeChat_SubscribeServer.Recv was called at least n times
func (f *FakeChat_SubscribeServer) RecvCalledN(n int) bool {
	return len(f.RecvCalls) >= n
}

// AssertRecvCalledN calls t.Error if FakeChat_SubscribeServer.Recv was called less than n times
func (f *FakeChat_SubscribeServer) AssertRecvCalledN(t Chat_SubscribeServerTestingT, n int) {
	t.Helper()
	if len(f.RecvCalls) < n {
		t.Errorf("FakeChat_SubscribeServer.Recv called %d times, expected >= %d", len(f.RecvCalls), n)
	}
}
